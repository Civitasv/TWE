* My Minimal Emacs Configuration for Writing
:PROPERTIES:
:ID:       81dcbf2a-a270-4194-a49e-b8bddace3af9
:END:

#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Disable welcome message 

First of all, I don't like the welcome messages.

#+begin_src emacs-lisp
  ;; no welcome messages
  (setq inhibit-startup-message t)
#+end_src

* Disable backup and autosave files

And I disable emacs to create backup and autosave files.

#+begin_src emacs-lisp
  ;; stop creating backup~ files
  (setq make-backup-files nil)
  ;; stop creating #autosave# files
  (setq auto-save-default nil)
#+end_src

* File encoding

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+end_src

* Performance Testing

Increase memory for Emacs.

#+begin_src emacs-lisp
  (if (not (display-graphic-p))
      (progn
        ;; 增大垃圾回收的阈值，提高整体性能（内存换效率）
        (setq gc-cons-threshold (* 8192 8192 100))
        (setq read-process-output-max (* 1024 1024 256)) ;; 128MB
        ))
#+end_src

** Messure startup time

#+begin_src emacs-lisp
  (defun civ/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
              (format "%.2f seconds"
                      (float-time
                        (time-subtract after-init-time before-init-time)))
              gcs-done))

  (add-hook 'emacs-startup-hook #'civ/display-startup-time)
#+end_src

* Proxy settings

#+begin_src emacs-lisp
  (when (or (string-equal system-type "windows-nt") ; Microsoft Windows
            (string-equal system-type "gnu/linux"))
    (setq url-proxy-services
          '(("http"  . "127.0.0.1:51837")
            ("https" . "127.0.0.1:51837"))))
#+end_src

* Package System Setup

[[https://github.com/radian-software/straight.el#features][straight.el]] is a next-generation, purely functional package manager for Emacs.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

[[https://github.com/jwiegley/use-package][use-package]] is not a package manager, its primary purpose is for the configuration and loading of packages. We can make our configuration one place and use it everyelse.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  ;; Initialize package sources
  (require 'use-package)
#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep .emacs.d Clean

I use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
                                          ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src


* User interface

** Toolbar, tooltip and menubar

Basically, I don't want to show the toolbar, menubar and tootips.

#+begin_src emacs-lisp
  ;; UI settings
  (scroll-bar-mode -1)	; Disable the scrollbar
  (tool-bar-mode -1)	; Disable the toolbar
  (tooltip-mode -1)	        ; Disable tooltips
  (set-fringe-mode 10)      ; Give some breathing room
  (menu-bar-mode -1)	; Disable the menu bar
#+end_src

** Make bell visible only

And, I find that the bell annoying.

#+begin_src emacs-lisp
  ;; Set up the visible bell
  (setq visible-bell t)
#+end_src

** Relative line number

For the modes except org-mode, term-mode and eshell-mode, I think showing the line number is a good choice. And it's relative!

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  ;; Disable line numbers for some modes, dolist is used to loop
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font

From http://baohaojun.github.io/perfect-emacs-chinese-font.html.

#+begin_src emacs-lisp
  (defun civ/font-existsp (font)
    (if (null (x-list-fonts font))
        nil t))

  (defun civ/make-font-string (font-name font-size)
    (if (and (stringp font-size)
             (equal ":" (string (elt font-size 0))))
        (format "%s%s" font-name font-size)
      (format "%s-%s" font-name font-size)))

  (defvar civ/english-font-size nil)
  (defun civ/set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &optional chinese-fonts-scale
                       )
    (setq chinese-fonts-scale (or chinese-fonts-scale 1.20))
    (setq face-font-rescale-alist `(("Microsoft Yahei" . ,chinese-fonts-scale)
                                    ("Microsoft_Yahei" . ,chinese-fonts-scale)
                                    ("微软雅黑" . ,chinese-fonts-scale)
                                    ("WenQuanYi Zen Hei" . ,chinese-fonts-scale)))
    "english-font-size could be set to \":pixelsize=18\" or a integer.
    If set/leave chinese-font-size to nil, it will follow english-font-size"
    (require 'cl)                         ; for find if
    (setq civ/english-font-size english-font-size)
    (let ((en-font (civ/make-font-string
                    (find-if #'civ/font-existsp english-fonts)
                    english-font-size))
          (zh-font (font-spec :family (find-if #'civ/font-existsp chinese-fonts))))

      ;; Set the default English font
      ;;
      ;; The following 2 method cannot make the font settig work in new frames.
      ;; (set-default-font "Consolas:pixelsize=18")
      ;; (add-to-list 'default-frame-alist '(font . "Consolas:pixelsize=18"))
      ;; We have to use set-face-attribute
      (set-face-attribute
       'default nil :font en-font)
      (condition-case font-error
          (progn
            (set-face-font 'italic (font-spec :family "JetBrains Mono" :slant 'italic :weight 'normal :size (+ 0.0 english-font-size)))
            (set-face-font 'bold-italic (font-spec :family "JetBrains Mono" :slant 'italic :weight 'bold :size (+ 0.0 english-font-size)))

            (set-fontset-font t 'symbol (font-spec :family "JetBrains Mono")))
        (error nil))
      (set-fontset-font t 'symbol (font-spec :family "FiraCode Nerd Font") nil 'append)
      (set-fontset-font t nil (font-spec :family "DejaVu Sans"))

      ;; Set Chinese font
      ;; Do not use 'unicode charset, it will cause the english font setting invalid
      (dolist (charset '(kana han cjk-misc bopomofo))
        (set-fontset-font t charset zh-font)))
    )

  (defvar civ/english-fonts '("JetBrains Mono" "Monaco" "Consolas" "DejaVu Sans Mono" "Monospace" "Courier New"))
  (defvar civ/chinese-fonts '("Microsoft Yahei" "Microsoft_Yahei" "微软雅黑" "文泉驿等宽微米黑" "黑体" "新宋体" "宋体"))

  (civ/set-font
   civ/english-fonts
   14
   civ/chinese-fonts)

  (defvar civ/chinese-font-size-scale-alist nil)

  (setq chinese-font-size-scale-alist '((12 . 1.25) (12.5 . 1.25) (14 . 1.20) (16 . 1.25) (20 . 1.20)))

  (defvar civ/english-font-size-steps '(9 10.5 11.5 12 12.5 13 14 16 18 20 22 40))
  (defun civ/step-frame-font-size (step)
    (let ((steps civ/english-font-size-steps)
          next-size)
      (when (< step 0)
        (setq steps (reverse civ/english-font-size-steps)))
      (setq next-size
            (cadr (member civ/english-font-size steps)))
      (when next-size
        (civ/set-font civ/english-fonts next-size civ/chinese-fonts (cdr (assoc next-size civ/chinese-font-size-scale-alist)))
        (message "Your font size is set to %.1f" next-size))))

  (global-set-key [(control x) (meta -)] (lambda () (interactive) (civ/step-frame-font-size -1)))
  (global-set-key [(control x) (meta +)] (lambda () (interactive) (civ/step-frame-font-size 1)))

  (set-face-attribute 'default nil :font (font-spec))
#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] provides many beautiful themes.

#+begin_src emacs-lisp
  ;; install doom theme
  (use-package doom-themes
    :config
    (load-theme 'doom-horizon t)
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src

** Better Mode line

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] provides a better modeline. Before installing doom-modeline, you should install [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] and use =M-x all-the-icons-install-font= to install all the fonts needed.

#+begin_src emacs-lisp

  ;; before using it, you should use `all-the-icons-install-fonts` to install the fonts
  (use-package all-the-icons
    :if (display-graphic-p))

  ;; emacs air line
  (use-package doom-modeline
    :hook (window-setup . doom-modeline-mode)
    :custom ((doom-modeline-height 15)))
#+end_src

** Highlight Current Line

#+begin_src emacs-lisp
  ;; highlight current line
  (global-hl-line-mode 1)
#+end_src

** Emoji support for Emacs

#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
#+end_src


** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "This is Civitasv!")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content nil)
    (setq dashboard-show-shortcuts t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (agenda . 5)
                            (registers . 5)))
    )
#+end_src

* Keybindings Configuration

I prefer to use Vi-like editing command, so I use the [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] to realize it.

[[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

[[https://github.com/abo-abo/hydra][hydra.el]] is best to make keybindings that have same prefix.

[[https://github.com/noctuid/general.el][general.el]] is used to create keybindings easily.

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package hydra)

  ;; A hydra example:
  ;; When `hydra-text-scale/body` is invoked,
  ;; then j, k, f will appear, press j to increase text, press k to decrease text, presee f to finish.
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (defhydra hydra-agenda (:timeout 4)
    "org agenda"
    ("a" org-agenda "show agenda")
    ("t" org-set-tags-command "add tags")
    ("f" nil "finished" :exit t))

  (use-package undo-tree
    :hook (after-init . global-undo-tree-mode))

  ;; vim mode
  ;; N, I, V, R, 0, M, E state
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq
     ;; Keybindings
     evil-toggle-key "C-z"   ; use C-z to change to and from Emacs state
     evil-disable-insert-state-bindings nil
     evil-want-C-w-delete t  ; delete a word in insert state
     evil-want-C-u-scroll t  ; scroll up
     evil-want-C-d-scroll t  ; scroll down
     evil-want-C-i-jump nil
     ;; Search
     evil-search-module 'isearch
     ;; Indentation
     evil-shift-width 2
     ;; Cursor movement 
     ;; Cursor display
     ;; Window management
     evil-split-window-below t
     evil-vsplit-window-right t
     evil-undo-system 'undo-tree
     )

    :config
    (evil-mode 1)

    ;; normal mode map
    (evil-global-set-key 'normal "U" 'evil-redo)

    ;; motion mode map
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
  (use-package general
    :after evil
    :config
    (general-override-mode)
    (general-def
      :states 'normal
      :keymaps '(global override)
      "C-h" 'evil-window-left
      "C-j" 'evil-window-down
      "C-k" 'evil-window-up
      "C-l" 'evil-window-right
      )

    (general-create-definer leader
      :states 'normal
      :keymaps '(global override)
      :prefix "SPC")
    (leader "<SPC>" 'counsel-M-x
      "bb" 'counsel-switch-buffer
      "b>" 'next-buffer
      "b<" 'previous-buffer
      "ff" 'counsel-find-file
      "df" 'describe-function
      "dv" 'describe-variable
      "dk" 'describe-key
      "dd" 'dired-jump
      "gg" 'magit
      )

    (general-create-definer org_leader
      :states 'normal
      :keymaps '(org-mode-map override)
      :prefix "SPC")

    (org_leader "lp" 'org-latex-preview)
    ) 
#+end_src

* Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a good libarary to provide some hints on the shortcut, for example, if we input =C-x=, it will toggle a UI panel to show all the commands which start with =C-x=.

#+begin_src emacs-lisp
  ;; give a hint on the shortcut
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src


* Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp
  ;; ivy: generic completion machanism
  ;; swiper: an ivy-enhanced alternative to isearch
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) ")

    (ivy-mode 1))

  ;; counsel: a collection of ivy-enhanced versions of common Emacs commands
  (use-package counsel
    :bind ( :map minibuffer-local-map
            ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  ;; ivy-rich: give description on the command, make ivy better
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

* Helpful

[[https://github.com/Wilfred/helpful][helpful]] gives a better document on almost everything in Emacs.

#+begin_src emacs-lisp
  ;; give a better doc
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the best modes in Emacs, It can make life easier.

** Org Babel

Org Babel allows us to evaluate code blocks in org file.

#+begin_src emacs-lisp
  (defun civ/org-babel-setup ()
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp .t)
       (python .t)
       (scheme .t)))

    (setq org-confirm-babel-evaluate nil)
    (setq org-babel-python-command "python"))
#+end_src

** Header Setting

#+begin_src emacs-lisp
  (defun civ/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "JetBrains Mono" :weight 'regular :height (cdr face))))
#+end_src

** Basic Config

This section contains the basic configuration for org-mode plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp
  ;; org mode setting
  (defun civ/org-code-automatically-format ()
    "org code format"
    (interactive)
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))

  (defun civ/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (setq org-src-tab-acts-natively t)
    (define-key org-mode-map
      (kbd "C-i") #'civ/org-code-automatically-format))

  ;; use org to organize your life
  (use-package org
    :hook (org-mode . civ/org-mode-setup)
    :config
    (setq org-ellipsis " ⌄")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; add org-habit, which enables us to show in agenda the STYLE
    ;; which value is habit
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    ;; add org-tempo, which enables us to add some typical language
    ;; and its alias, to input the alias and <TAB>, we can generate
    ;; the code block quickly
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("scm" . "src scheme"))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-src-tab-acts-natively t)
    (civ/org-font-setup)
    (civ/org-babel-setup))
#+end_src

** Nicer Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] makes the heading stars better.

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center Org Buffers

Use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp
  (defun civ/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . civ/org-mode-visual-fill))
#+end_src

** Auto-tangle Configuration Files

I don't want execute =org-babel-tangle= every time to make the configuration file change, so I make it automate.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Math Formulas

Use =<SPC>lp= to preview math formulas.

$$a^2=b$$

#+begin_src emacs-lisp
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-latex-listings 'minted)
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.8))
#+end_src

* Magit

Magit is powerful.

#+begin_src emacs-lisp
  (use-package magit)

  (use-package forge
    :after magit
    :init
    (setq forge-add-default-sections nil)
    (setq forge-add-default-bindings nil))
#+end_src

* Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than completion-at-point which is more reminiscent of what you would expect from an IDE. I add a simple configuration to make the keybindings a little more useful (TAB now completes the selection and initiates completion at the current location if needed).

I also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
  (use-package company
    :hook (after-init . global-company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection)
                ("<return>" . company-complete-selection)
                ("RET" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)

    :config
    (use-package company-math
      :config
      ;; global activation of the unicode symbol completion 
      (add-to-list 'company-backends 'company-math-symbols-unicode))
    (use-package company-box
      :hook (company-mode . company-box-mode))
    )
#+end_src

* Commenting

Emacs’ built in commenting functionality comment-dwim (usually bound to M-;) doesn’t always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior. I’ve bound it to M-/ since other editors sometimes use this binding but you could also replace Emacs’ M-; binding with this command.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

* Bracket Auto Complete

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook (lambda () (electric-pair-mode t)))
#+end_src

* Terminals

** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode
  
ATTENTION: When you're in terminal mode, any regular ==C-x whatever== will become ==C-c whatever==, so you should use ==C-c b== to switch buffer.

#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")  ; Linux
    (use-package term
      :config
      (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
      ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

      ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")))
#+end_src

** eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp
  (defun civ/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . civ/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))
#+end_src

* File ManageMent

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)
  
**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =*t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer)

    (use-package dired-single)

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))

    (use-package dired-hide-dotfiles
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "H" 'dired-hide-dotfiles-mode))
    )
#+end_src

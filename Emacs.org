#+TITLE: My Minimal Emacs Configuration for Writing
#+AUTHOR: Civitasv
#+OPTIONS: num:nil
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Showcase

[[https://github.com/Civitasv/runemacs/blob/master/images/Showcase.png]]

* Package System Setup

[[https://github.com/radian-software/straight.el#features][straight.el]] is a next-generation, purely functional package manager for Emacs.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

[[https://github.com/jwiegley/use-package][use-package]] is not a package manager, its primary purpose is for the configuration and loading of packages. We can make our configuration one place and use it everyelse.

#+begin_src emacs-lisp
  (if (<= emacs-major-version 28)
      (straight-use-package 'use-package))
  
  (setq straight-use-package-by-default t)
  ;; Initialize package sources
  (require 'use-package)
#+end_src

** Automatic package updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Basics

** Allow backup and autosave files

#+begin_src emacs-lisp
  ;; stop creating backup~ files
  (setq make-backup-files t)
  ;; stop creating #autosave# files
  (setq auto-save-default t)
#+end_src

** File encoding

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+end_src

** Word wrap

#+begin_src emacs-lisp
  (dolist (hook '(org-mode-hook
                  c-mode-hook
                  helpful-mode-hook))
    (add-hook hook
              '(lambda ()
                 (setq visual-line-fringe-indicators '(unknown unknown))
                 (visual-line-mode)
                 (if visual-line-mode
                     (setq word-wrap nil)))))
#+end_src

** Proxy settings

#+begin_src emacs-lisp
  (when (or (string-equal system-type "windows-nt") ; Microsoft Windows
            (string-equal system-type "gnu/linux"))
    (setq url-proxy-services
          '(("http"  . "127.0.0.1:51837")
            ("https" . "127.0.0.1:51837"))))
#+end_src

** Make error visible only

And, I find that the bell annoying.

#+begin_src emacs-lisp
  ;; Set up the visible bell
  (setq visible-bell t)
#+end_src

** Keep .emacs.d Clean

I use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
                                          ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src


** Better emacs docs

[[https://github.com/Wilfred/helpful][helpful]] gives a better document on almost everything in Emacs.

#+begin_src emacs-lisp
  ;; give a better doc
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src
** Commenting

Emacs’ built in commenting functionality comment-dwim (usually bound to M-;) doesn’t always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.

=<space>/=: comment

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
#+end_src

** Bracket auto complete

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook (lambda () (electric-pair-mode t)))
#+end_src
** PDF with zathura

Zathura is the way!

#+begin_src emacs-lisp
  (use-package openwith
    :config
    (openwith-mode t)
    (setq openwith-associations '(("\\.pdf\\'" "zathura" (file)))))
#+end_src

* User interface

** Margins

#+begin_src emacs-lisp
  (setq-default left-margin-width 1 right-margin-width 1)
#+end_src

** Relative line number

For the modes except org-mode, term-mode and eshell-mode, I think showing the line number is a good choice. And it's relative!

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  
  ;; Disable line numbers for some modes, dolist is used to loop
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Scroll more naturally

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode)
#+end_src
** Font

From http://baohaojun.github.io/perfect-emacs-chinese-font.html.

#+begin_src emacs-lisp
  (let ((zh-font (font-spec :font "Sarasa Gothic-14")))
    (set-face-attribute 'default nil :font "Iosevka-14")
    (set-face-attribute 'fixed-pitch nil :font "Iosevka-14") ;; code block size
    (set-face-attribute 'variable-pitch nil :font "Iosevka-14")
    (set-fontset-font t 'symbol (font-spec :family "FiraCode Nerd Font") nil 'append)
    (set-fontset-font t nil (font-spec :family "DejaVu Sans"))

    ;; Set Chinese font
    ;; Do not use 'unicode charset, it will cause the english font setting invalid
    (dolist (charset '(kana han cjk-misc bopomofo))
      (set-fontset-font t charset zh-font)))
#+end_src

** Color Theme

[[https://github.com/protesilaos/modus-themes][modus-themes]] is the way!

#+begin_src emacs-lisp
  ;; improve theme loading
  (defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))

  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))

  (use-package modus-themes
    :config
    (setq modus-themes-bold-constructs t
          modus-themes-italic-constructs t
          modus-themes-org-blocks 'gray-background
          modus-themes-variable-pitch-ui t
          modus-themes-common-palette-overrides
          '((border-mode-line-active unspecified)
            (border-mode-line-inactive unspecified)))
    (load-theme 'modus-operandi-tinted t))
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "This is Civitasv!")
    (setq dashboard-startup-banner 'official)
    (setq dashboard-center-content nil)
    (setq dashboard-show-shortcuts t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (agenda . 5)
                            (registers . 5)))
    )
#+end_src

** Better Mode line

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] provides a better modeline. Before installing doom-modeline, you should install [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] and use =M-x all-the-icons-install-font= to install all the fonts needed.

#+begin_src emacs-lisp
  ;; before using it, you should use `all-the-icons-install-fonts` to install the fonts
  (use-package all-the-icons
    :if (display-graphic-p))

  ;; emacs air line
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom ((doom-modeline-height 35)
             (doom-modeline-indent-info t)))
#+end_src

** Highlight Current Line

#+begin_src emacs-lisp
  ;; highlight current line
  (global-hl-line-mode 1)
#+end_src

** Emoji support for Emacs

#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
#+end_src

** SVG Tag Mode

#+begin_src emacs-lisp
  (use-package svg-tag-mode
    :config
    (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
    (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
    (defconst day-re "[A-Za-z]\\{3\\}")
    (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

    (defun svg-progress-percent (value)
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                        nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag (concat value "%")
                               nil :stroke 0 :margin 0)) :ascent 'center))

    (defun svg-progress-count (value)
      (let* ((seq (mapcar #'string-to-number (split-string value "/")))
             (count (float (car seq)))
             (total (float (cadr seq))))
        (svg-image (svg-lib-concat
                    (svg-lib-progress-bar (/ count total) nil
                                          :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                    (svg-lib-tag value nil
                                 :stroke 0 :margin 0)) :ascent 'center)))
    (setq svg-tag-tags
          `(
            ;; Progress, format: [22%] [22/32]
            ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                                (svg-progress-percent (substring tag 1 -2)))))
            ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                              (svg-progress-count (substring tag 1 -1)))))
            ;; Org tags, format: :PROPERTIES:
            ("\\(:[A-Za-z0-9]+:\\)" . ((lambda (tag) (svg-tag-make tag))))
            ("\\(:[A-Za-z0-9]+[ \-]:\\)" . ((lambda (tag) tag)))
            ;; Task priority, format: [#Z]
            ("\\[#[a-zA-Z]\\]" . ( (lambda (tag)
                                  (svg-tag-make tag :face 'org-priority
                                                :beg 2 :end -1 :margin 0))))
            ;; TODO / DONE
            ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
            ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))
            ;; Citation of the form [cite:@Knuth:1984]
            ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                              (svg-tag-make tag
                                                            :inverse t
                                                            :beg 7 :end -1
                                                            :crop-right t))))
            ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                       (svg-tag-make tag
                                                                     :end -1
                                                                     :crop-left t))))

            ;; Active date (with or without day name, with or without time),
            ;; format: <2022-12-12>, <2022-12-12 12:21>
            (,(format "\\(<%s>\\)" date-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :end -1 :margin 0))))
            (,(format "\\(<%s \\)%s>" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
            (,(format "<%s \\(%s>\\)" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

            ;; Inactive date  (with or without day name, with or without time)
            ;; format: <2022-12-12>, [2022-12-12 12:21]
            (,(format "\\(\\[%s\\]\\)" date-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
            (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
            (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))
            ))

    (dolist (mode '(org-mode-hook))
      (add-hook mode (lambda () (svg-tag-mode 1))))
    )
#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the best modes in Emacs, It can make life easier.

** Org Babel

Org Babel allows us to evaluate code blocks in org file.

#+begin_src emacs-lisp
  (defun civ/org-babel-setup ()
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp .t)
       (python .t)
       (scheme .t)))

    (setq org-confirm-babel-evaluate nil)
    (setq org-babel-python-command "python"))
#+end_src

** Header

#+begin_src emacs-lisp
  (defun civ/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.06)
                    (org-level-2 . 1.05)
                    (org-level-3 . 1.03)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Iosevka" :weight 'regular :height (cdr face))))
#+end_src

** Basic Config

This section contains the basic configuration for org-mode plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp
  ;; org mode setting
  (defun civ/org-code-automatically-format ()
    "org code format"
    (interactive)
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))

  (defun civ/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (setq org-src-tab-acts-natively t)
    (define-key org-mode-map
                (kbd "M-i") #'civ/org-code-automatically-format)
    (define-key org-mode-map (kbd "TAB") #'indent-for-tab-command))

  (defun civ/org-agenda-show-svg ()
    (let* ((case-fold-search nil)
           (keywords (mapcar #'svg-tag--build-keywords svg-tag--active-tags))
           (keyword (car keywords)))
      (while keyword
        (save-excursion
          (while (re-search-forward (nth 0 keyword) nil t)
            (overlay-put (make-overlay
                          (match-beginning 0) (match-end 0))
                         'display  (nth 3 (eval (nth 2 keyword)))) ))
        (pop keywords)
        (setq keyword (car keywords)))))

  (add-hook 'org-agenda-finalize-hook #'civ/org-agenda-show-svg)

  ;; use org to organize your life
  (use-package org
    :hook (org-mode . civ/org-mode-setup)
    :config

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; add org-habit, which enables us to show in agenda the STYLE
    ;; which value is habit
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    ;; add org-tempo, which enables us to add some typical language
    ;; and its alias, to input the alias and <TAB>, we can generate
    ;; the code block quickly
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("scm" . "src scheme"))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (civ/org-font-setup)
    (civ/org-babel-setup))
#+end_src

** Org Modern UI

#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :config
    (setq ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-fold-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers nil
     org-pretty-entities nil
     org-ellipsis "  "

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")
    (global-org-modern-mode)
    )
#+end_src

** Center Org Buffers

#+begin_src emacs-lisp
  (defun civ/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . civ/org-mode-visual-fill))
#+end_src

** Auto-tangle Configuration Files

I don't want execute =org-babel-tangle= every time to make the configuration file change, so I make it automate.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Math Formulas

Use =<SPC>lp= to preview math formulas.

$$a^2=b$$

#+begin_src emacs-lisp
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-latex-listings 'minted)
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.8))
#+end_src

* Keybindings

I prefer to use Vi-like editing command, so I use the [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] to realize it.

[[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

[[https://github.com/abo-abo/hydra][hydra.el]] is best to make keybindings that have same prefix.

[[https://github.com/noctuid/general.el][general.el]] is used to create keybindings easily.

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package hydra)

  ;; A hydra example:
  ;; When `hydra-text-scale/body` is invoked,
  ;; then j, k, f will appear, press j to increase text, press k to decrease text, presee f to finish.
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (defhydra hydra-agenda (:timeout 4)
    "org agenda"
    ("a" org-agenda "show agenda")
    ("t" org-set-tags-command "add tags")
    ("f" nil "finished" :exit t))

  (use-package undo-tree
    :hook (after-init . global-undo-tree-mode))

  ;; vim mode
  ;; N, I, V, R, 0, M, E state
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq
     ;; Keybindings
     evil-toggle-key "C-z"   ; use C-z to change to and from Emacs state
     evil-disable-insert-state-bindings nil
     evil-want-C-w-delete t  ; delete a word in insert state
     evil-want-C-u-scroll t  ; scroll up
     evil-want-C-d-scroll t  ; scroll down

     ;; Search
     evil-search-module 'isearch
     ;; Indentation
     evil-shift-width 2
     ;; Cursor movement 
     ;; Cursor display
     ;; Window management
     evil-split-window-below t
     evil-vsplit-window-right t
     evil-undo-system 'undo-tree
     )

    :config
    (evil-mode 1)

    ;; normal mode map
    (evil-global-set-key 'normal "U" 'evil-redo)

    ;; motion mode map
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-global-set-key 'motion (kbd "<down>") 'evil-next-visual-line)
    (evil-global-set-key 'motion (kbd "<up>") 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    ;; define my own command
    (evil-ex-define-cmd "V[split]" 'evil-window-vsplit)
    )

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package general
    :after evil
    :config
    (general-override-mode)
    (general-def
      :states '(normal insert)
      :keymaps '(global override)
      "C-h" 'evil-window-left
      "C-j" 'evil-window-down
      "C-k" 'evil-window-up
      "C-l" 'evil-window-right
      "C-SPC" 'completion-at-point
      )

    (general-create-definer visual_leader
      :states 'visual
      :keymaps '(global override)
      :prefix "SPC")

    (general-create-definer leader
      :states 'normal
      :keymaps '(global override)
      :prefix "SPC")

    (leader "<SPC>" 'execute-extended-command
      "bb" 'consult-buffer
      "b>" 'next-buffer
      "b<" 'previous-buffer
      "br" 'revert-buffer-quick
      "ff" 'find-file
      "df" 'describe-function
      "dv" 'describe-variable
      "dk" 'describe-key
      "dd" 'dired-jump
      "gg" 'magit
      "oe" 'org-export-dispatch
      "sf" 'consult-find
      "ss" 'consult-ripgrep
      "mm" 'consult-man
      "/"  'evilnc-comment-or-uncomment-lines
      )

    (visual_leader "/" 'evilnc-comment-or-uncomment-lines)

    (general-create-definer org_leader
      :states 'normal
      :keymaps '(org-mode-map override)
      :prefix "SPC")

    (org_leader "lp" 'org-latex-preview)
    ) 
#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a good libarary to provide some hints on the shortcut, for example, if we input =C-x=, it will toggle a UI panel to show all the commands which start with =C-x=.

#+begin_src emacs-lisp
  ;; give a hint on the shortcut
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src


* Minibuffer and completion

Vertico(replace ivy), marginalia(replace ivy-rich), corfu(replace company), consult(replace counsel).

#+begin_src emacs-lisp
  (fido-vertical-mode)                                              ; Show completion candidates in a vertical, interactive list
  (define-key minibuffer-mode-map (kbd "TAB") 'minibuffer-complete) ; TAB acts more like how it does in the shell

  ;; Vertico: better vertical completion for minibuffer commands, replace ivy
  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous))
    :init
    (fido-mode -1)
    (vertico-mode))

  ;; Marginalia: annotations for minibuffer, replace ivy-rich
  (use-package marginalia
    :config
    (marginalia-mode))

  ;; Code Completion
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto nil)                ; Disable auto completion
    (corfu-auto-prefix 1)
    ;; (corfu-auto-delay 0.0)
    (corfu-echo-documentation 0.25) ; Enable documentation for completions
    (corfu-preview-current t) ; Do not preview current candidate
    (corfu-preselect-first nil)
    (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets
  
    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("TAB"     . corfu-next)
                ([tab]     . corfu-next)
                ("S-TAB"   . corfu-previous)
                ([backtab] . corfu-previous)
                ("RET"     . corfu-insert))
    :init
    (global-corfu-mode)
    :config
    (setq tab-always-indent 'complete)
    (setq enable-recursive-minibuffers t)                             ; Use the minibuffer whilst in the minibuffer
    (setq completion-cycle-threshold 1)                               ; TAB cycles candidates
    (setq completions-detailed t)                                     ; Show annotations

    (custom-set-faces
     '(corfu-default ((t (:background "#f0f0f0" :foreground "black"))))
     '(corfu-current ((t (:background "#c0efff" :foreground "black"))))
     '(corfu-bar ((t (:background "#505050"))))
     '(corfu-border ((t (:background "#d7d7d7"))))
     '(corfu-border ((t (:background "#d7d7d7"))))
     )

    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))))

  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point)) ;; capf
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-hook 'org-mode-hook
              (lambda ()
                (add-to-list 'completion-at-point-functions #'cape-dabbrev)
                (add-to-list 'completion-at-point-functions #'cape-file)
                (add-to-list 'completion-at-point-functions #'cape-keyword)
                (add-to-list 'completion-at-point-functions #'cape-tex)
                (add-to-list 'completion-at-point-functions #'cape-abbrev)
                (add-to-list 'completion-at-point-functions #'cape-symbol)
                ))
    (add-hook 'eshell-mode-hook
              (lambda () 
                (add-to-list 'completion-at-point-functions #'cape-history)
                )))

  ;; Make corfu popup come up in terminal overlay
  (use-package corfu-terminal
    :if (not (display-graphic-p))
    :config
    (corfu-terminal-mode))

  ;; Pretty icons for corfu
  (use-package kind-icon
    :if (display-graphic-p)
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; Consult: Misc. enhanced commands, replace counsel
  (use-package consult
    :bind (("C-s" . consult-line)     ;; orig. isearch
           )
    )

  ;; Orderless: powerful completion style
  (use-package orderless
    :config
    (setq orderless-component-separator " +"
          completion-ignore-case t
          read-buffer-completion-ignore-case t
          read-file-name-completion-ignore-case t
          completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

* Magit

Magit is powerful.

#+begin_src emacs-lisp
  (use-package magit)

  (use-package forge
    :after magit
    :init
    (setq forge-add-default-sections nil)
    (setq forge-add-default-bindings nil))
#+end_src

* Terminal

** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode
  
#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")  ; Linux
    (use-package term
      :config
      (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
      ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

      ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")))
#+end_src

** eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp
  (defun civ/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . civ/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'simple))
#+end_src

* File ManageMent

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)
    
**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =*t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension
  
**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer)

    (use-package dired-single)

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))

    (use-package dired-hide-dotfiles
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "H" 'dired-hide-dotfiles-mode))
    )
#+end_src

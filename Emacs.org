* Emacs Configuration
:PROPERTIES:qqq
:ID:       81dcbf2a-a270-4194-a49e-b8bddace3af9
:END:

#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Basic 

Emacs Is A Way To Think!

I use Emacs maily to:
  - write blogs
  - web development

For python, I'll still use Vs Code for now.

For java, I'll still use Idea.

I don't think Emacs can substitute them now, but I'll be very happy if I can in the future.
  
This file is my configuration of Emacs, and I feel that it's a good way for me to make a org file to organize the configuration. So, let's start it!

First of all, I don't like the welcome messages.

#+begin_src emacs-lisp
  ;; no welcome messages
  (setq inhibit-startup-message t)
#+end_src

And I disable emacs to create backup and autosave files.

#+begin_src emacs-lisp
  ;; stop creating backup~ files
  (setq make-backup-files nil)
  ;; stop creating #autosave# files
  (setq auto-save-default nil)
#+end_src

* Startup Time

#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; (setq gc-cons-threshold (* 50 1000 1000))

  ;; (defun civ/display-startup-time ()
  ;;   (message "Emacs loaded in %s with %d garbage collections."
  ;;            (format "%.2f seconds"
  ;;                    (float-time
  ;;                      (time-subtract after-init-time before-init-time)))
  ;;            gcs-done))

  ;; (add-hook 'emacs-startup-hook #'civ/display-startup-time)
#+end_src

* Encoding

#+begin_src emacs-lisp
(set-language-environment "UTF-8")
#+end_src

* Proxy Set

#+begin_src emacs-lisp
  (when (string-equal system-type "windows-nt") ; Microsoft Windows
    (setq url-proxy-services
          '(("http"  . "127.0.0.1:7890")
            ("https" . "127.0.0.1:7890"))))
#+end_src

* WSL Configuration

I sometimes use Emacs on WSL which is a subsystem of windows 10, there are several problems of it, such as copy/paster, open link with the chrome of windows.

** Browser

+I try so many solutions but still can't fix it, so I just install a google chrome in Linux, and use it as my default browser.+

+Here are some program I ever use but not work:+

+- wslview+
+- /mnt/c/Program Files/Google/Chrome/Application/chrome.exe+
+- MicrosoftEdge.exe (location)+

+So Maybe Later I should fix it.+

Don't know why, but I finally fix it.

#+begin_src emacs-lisp
  (when (and (eq system-type 'gnu/linux)
             (string-match
              "Linux.*Microsoft.*Linux"
              (shell-command-to-string "uname -a")))
    (setq
     browse-url-generic-program "/mnt/c/Program Files/Google/Chrome/Application/chrome.exe"
     browse-url-browser-function #'browse-url-generic))
;;;
#+end_src

** Copy/Paste

With WSL2, you can copy and paste from wsl and windows directly, so it's no need to use the lisp follows.

#+begin_src emacs-lisp
;; (defun wsl-copy-region-to-clipboard (start end)
;;   "Copy region to Windows clipboard."
;;   (interactive "r")
;;   (call-process-region start end "clip.exe" nil 0))

;; (defun wsl-cut-region-to-clipboard (start end)
;;   "Cut region to Windows clipboard."
;;   (interactive "r")
;;   (call-process-region start end "clip.exe" nil 0)
;;   (kill-region start end))

;; (defun wsl-clipboard-to-string ()
;;   "Return Windows clipboard as string"
;;   (let ((coding-system-for-read 'dos))
;;     (substring
;;      (shell-command-to-string
;;       "powershell.exe -Command Get-Clipboard") 0 -1)))

;; (defun wsl-paste-from-clipboard (arg)
;;   "Insert Windows clipboard at point. With prefix ARG, also add to kill-ring."
;;   (interactive "p")
;;   (let ((clip (wsl-clipboard-to-string)))
;;     (insert clip)
;;     (if arg (kill-new clip))))
#+end_src

* UI Config

Basically, I don't want to show the scrollbar, toolbar, menubar and tootips.

#+begin_src emacs-lisp
  ;; UI settings
  (scroll-bar-mode -1)	; Disable the scrollbar
  (tool-bar-mode -1)	; Disable the toolbar
  (tooltip-mode -1)	; Disable tooltips
  (set-fringe-mode 10)    ; Give some breathing room
  (menu-bar-mode -1)	; Disable the menu bar
#+end_src

And, I find that the bell annoying.

#+begin_src emacs-lisp
  ;; Set up the visible bell
  (setq visible-bell t)
#+end_src

For the modes except org-mode, term-mode and eshell-mode, I think showing the line number is a good choice.

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes, dolist is used to loop
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font settings

I like the Fira Code.

#+begin_src emacs-lisp
  ;; font setting
  ;; set default font
  (cond
   ((string-equal system-type "windows-nt") ; Microsoft Windows
    (when (member "Fira Code Retina" (font-family-list))
      (set-frame-font "Fira Code Retina" t t)))
   ((string-equal system-type "darwin") ; macOS
    (when (member "Menlo" (font-family-list))
      (set-frame-font "Menlo" t t)))
   ((string-equal system-type "gnu/linux") ; linux
    (when (member "Fira Code" (font-family-list))
      (set-frame-font "Fira Code Retina" t t))))

  ;; ;; 汉语设置
  ;; (set-fontset-font
  ;;  t
  ;;  'han
  ;;  (cond
  ;;   ((string-equal system-type "windows-nt")
  ;;    (cond
  ;;     ((member "微软雅黑" (font-family-list)) "微软雅黑")
  ;;     ((member "微软正黑体" (font-family-list)) "微软正黑体")))
  ;;   ((string-equal system-type "darwin")
  ;;    (cond
  ;;     ((member "Hei" (font-family-list)) "Hei")
  ;;     ((member "Heiti SC" (font-family-list)) "Heiti SC")
  ;;     ((member "Heiti TC" (font-family-list)) "Heiti TC")))
  ;;   ((string-equal system-type "gnu/linux")
  ;;    (cond
  ;;     ((member "WenQuanYi Micro Hei" (font-family-list)) "WenQuanYi Micro Hei")))))

  (set-face-attribute 'default nil :height 120)
#+end_src

#+begin_src emacs-lisp
  (use-package emojify)
#+end_src

* Package System Setup

[[https://github.com/jwiegley/use-package][use-package]] is a really useful Emacs libarary to make automated configuration. We can make our configuration one place and use it everyelse.

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms,
  ;; which is used to install packages
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src



** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src
* Keybindings Configuration

I prefer to use Vi-like editing command, so I use the [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] to realize it.

[[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

And for make my own keymaps, I use [[https://github.com/noctuid/general.el][general.el]].

Hydra is best to make keybindings that have same prefix.

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; bing C-M-J to switch buffer
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)

  ;; used to make your own keymaps
  (use-package general
    :ensure t
    :config
    (general-create-definer civitasv/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (civitasv/leader-keys
      "t" '(counsel-load-theme :which-key "choose theme")
      "z" '(hydra-text-scale/body :which-key "scale text")
      "a" '(hydra-agenda/body :which-key "org agenda")
      "s" '(org-insert-subheading :which-key "insert subheading")))

  (use-package hydra)

  ;; A hydra example:
  ;; When `hydra-text-scale/body` is invoked,
  ;; then j, k, f will appear, press j to increase text, press k to decrease text, presee f to finish.
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (defhydra hydra-agenda (:timeout 4)
    "org agenda"
    ("a" org-agenda "show agenda")
    ("t" org-set-tags-command "add tags")
    ("f" nil "finished" :exit t))

  (use-package undo-tree)
  ;; vim mode
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)  ; scroll up
    (setq evil-want-C-d-scroll t)  ; scroll down
    (setq evil-want-C-i-jump nil)
    :config
    (global-undo-tree-mode)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-undo-system 'undo-tree)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

* UI Configuration

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] provides many beautiful themes.

#+begin_src emacs-lisp
  ;; install doom theme
  (use-package doom-themes
    :init (load-theme 'doom-dracula t))
#+end_src

** Better Mode line

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] provides a better modeline. Before installing doom-modeline, you should install [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] and use =M-x all-the-icons-install-font= to install all the fonts needed.

#+begin_src emacs-lisp

  ;; before using it, you should use `all-the-icons-install-fonts` to install the fonts
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  ;; emacs air line
  (use-package doom-modeline
    :ensure t
    :hook (window-setup . doom-modeline-mode)
    :custom ((doom-modeline-height 15)))
#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a good libarary to provide some hints on the shortcut, for example, if we input =C-x=, it will toggle a UI panel to show all the commands which start with =C-x=.

#+begin_src emacs-lisp
  ;; give a hint on the shortcut
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp
  ;; ivy: generic completion machanism
  ;; swiper: an ivy-enhanced alternative to isearch
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; counsel: a collection of ivy-enhanced versions of common Emacs commands
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  ;; ivy-rich: give description on the command, make ivy better
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

** Helpful

[[https://github.com/Wilfred/helpful][helpful]] gives a better document on almost everything in Emacs.

#+begin_src emacs-lisp
  ;; give a better doc
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the best modes in Emacs, It makes our life easier.

** Org Babel

Org Babel allows us to evaluate code blocks in org file.

#+begin_src emacs-lisp
  (defun civ/org-babel-setup ()
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp .t)
       (python .t)))

    (setq org-confirm-babel-evaluate nil)
    (setq org-babel-python-command "python3"))
#+end_src

** Font Setting

#+begin_src emacs-lisp
  (defun civ/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Code Retina" :weight 'regular :height (cdr face))))
#+end_src

** Basic Config

This section contains the basic configuration for org-mode plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp
  ;; org mode setting
  (defun civ/org-code-automatically-format ()
    "org code format"
    (interactive)
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))

  (defun civ/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (setq org-src-tab-acts-natively t)
    (define-key org-mode-map
      (kbd "C-i") #'civ/org-code-automatically-format))


  ;; use org to organize your life
  (use-package org
    :hook (org-mode . civ/org-mode-setup)
    :config
    (setq org-ellipsis " ⌄")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("/mnt/c/Users/senhu/app/workflow/project/org/tasks.org"
            "/mnt/c/Users/senhu/app/workflow/project/org/habits.org"
            "/mnt/c/Users/senhu/app/workflow/project/org/birthdays.org"))

    ;; add org-habit, which enables us to show in agenda the STYLE
    ;; which value is habit
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    ;; add org-tempo, which enables us to add some typical language
    ;; and its alias, to input the alias and <TAB>, we can generate
    ;; the code block quickly
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; initial some tags
    (setq org-tag-alist
          '((:startgroup)
            ; Put mutually exclusive tags here
            (:endgroup)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (todo "ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ;; Low-effort next actions
            ("e" "Low Effort Tasks" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ;; Search all todo tags with work
            ("W" "Work Tasks" tags-todo "+@work")

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "/mnt/c/Users/senhu/app/workflow/project/org/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "/mnt/c/Users/senhu/app/workflow/project/org/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "/mnt/c/Users/senhu/app/workflow/project/org/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "/mnt/c/Users/senhu/app/workflow/project/org/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "/mnt/c/Users/senhu/app/workflow/project/org/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (setq org-src-tab-acts-natively t)
    (civ/org-font-setup)
    (civ/org-babel-setup))
#+end_src

** Nicer Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] makes the heading stars better.

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp
  (defun civ/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . civ/org-mode-visual-fill))
#+end_src

** Auto-tangle Configuration Files

I don't want execute =org-babel-tangle= every time to make the configuration file change, so I make it automate.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* Development

** Languages
*** Language Servers

#+begin_src emacs-lisp
  (defun civ/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package yasnippet)

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . civ/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    (setq lsp-modeline-diagnostics-scope :workspace)
    :config
    (lsp-enable-which-key-integration t))
#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of lsp-mode which make Emacs feel even more like an IDE. Check out the screenshots on the lsp-ui homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code. When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code. Results will be populated in the minibuffer so that you can find what you’re looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp
(use-package lsp-ivy)
#+end_src


*** TypeScript

**** Language Server

#+begin_src emacs-lisp
  (add-to-list 'exec-path "/root/.nvm/versions/node/v17.3.1/bin")

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

*** Python

#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp))))  ; or lsp-deferred
#+end_src

*** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than completion-at-point which is more reminiscent of what you would expect from an IDE. We add a simple configuration to make the keybindings a little more useful (TAB now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

I often want to go to a new line when I touch =<return>=, buf default it will triger =company-complete-selection=, so I just change it to =nil=, and use =<tab= to =select= instead.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection)
                ("<return>" . nil)
                ("RET" . nil))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages. Many packages integrate with Projectile so it¡¯s a good idea to have it installed even if you don¡¯t use its commands directly.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "/mnt/c/Users/senhu/app/workflow/project")
      (setq projectile-project-search-path '("/mnt/c/Users/senhu/app/workflow/project")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

** Magit

[[https://magit.vc/][Magit]] is a magical git manage tool.

#+begin_src emacs-lisp
  ;; a magical git manage tool
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :after magit
    :init
    (setq forge-add-default-sections nil)
    (setq forge-add-default-bindings nil))
#+end_src

** Commenting

Emacs’ built in commenting functionality comment-dwim (usually bound to M-;) doesn’t always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior. I’ve bound it to M-/ since other editors sometimes use this binding but you could also replace Emacs’ M-; binding with this command.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp
;; make parentheses more beautiful
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Bracket Auto Complete

#+begin_src emacs-lisp
(add-hook 'after-init-hook (lambda () (setq electric-pair-mode t)))
#+end_src>

* Terminals

** Linux

*** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode
  
ATTENTION: When you're in terminal mode, any regular ==C-x whatever== will become ==C-c whatever==, so you should use ==C-c b== to switch buffer.

#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")  ; Linux
    (use-package term
      :config
      (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
      ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

      ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")))
#+end_src

** Windows

*** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)
  (setq explicit-shell-file-name "powershell.exe")
  (setq explicit-powershell.exe-args '()))
#+end_src

** eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp
  (defun civ/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . civ/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))
#+end_src

* File ManageMent

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)
  
**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src
